# -*- coding: utf-8 -*-
import sys
import os
import email
import zipfile


def explode(storage_dir, path=None, s=None):
    """
    Explodes an mht file into a browsable directory containing all resources.

    Either pass in the path to the mht file, or pass in the contents of them
    file.

    Arguments:
    storage_dir -- directory where all resources should be stored
    path -- (optional) path to mht file, generated by psr.exe
    s -- (optional) contents of the mht file

    """
    if path:
        explode_file(storage_dir, path)
    elif s:
        explode_string(storage_dir, s)
    raise ValueError('Specify a file handle or string')


def explode_file(storage_dir, path):
    """
    Explodes an mht file into a browsable directory.

    """
    with file(path, 'r') as fh:
        explode_string(storage_dir, fh.read())


def explode_string(storage_dir, s):
    """
    Explodes the contents of an mht into a browsable directory.

    """
    storage_dir = os.path.abspath(storage_dir)
    message = email.message_from_string(s)
    for part in message.walk():
        filename = part.get('Content-Location')
        if not filename:
            # Skip the first part
            continue
        path = os.path.abspath(os.path.join(storage_dir, filename))
        common_prefix = os.path.commonprefix([path, storage_dir])
        if not common_prefix.startswith(storage_dir):
            raise IOError('The path %s is not allowed' % (path))
        if os.path.exists(path):
            raise IOError('The path %s already exists' % (path))
        with file(path, 'w') as output:
            output.write(part.get_payload(decode=True))


def apply_makeup(storage_dir):
    """
    Applies makeup to the generated files.

    The main.htm file contained in an mht file contains XML that isn't that
    informative since the actual actions are reported at the bottom of thep
    page.

    """
    path = os.path.join(storage_dir, 'main.css')
    if not os.path.isfile(path):
        return
    with file(path, 'a') as css:
        css.write("\nxml {display:none}\n")


def main():
    print('Kicking off')
    args = sys.argv
    nr_args = len(args)
    if nr_args < 2 or '-h' in args:
        show_usage()
        sys.exit(1)
    input_file = args[1]
    if not os.path.exists(input_file):
        print('File %s does not exist' % (input_file))
        sys.exit(1)
    if nr_args >= 3 and not '-b' in args[2] and not '-h' in args[2]:
        output_dir = args[2]
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
    else:
        output_dir = create_output_directory(input_file)
    if zipfile.is_zipfile(input_file):
        contents = read_from_zip(input_file)
    else:
        fh = open(input_file, 'r')
        contents = fh.read()
        fh.close()
    print('Exploding...')
    explode_string(output_dir, contents)
    print('Applying makeup...')
    apply_makeup(output_dir)
    print('Exploded %s into %s' % (input_file, output_dir))
    if '-b' in args:
        open_browser(output_dir)


def read_from_zip(f):
    print('Reading from zip file...')
    zf = zipfile.ZipFile(f)
    names = zf.namelist()
    if not names:
        raise IOError('%s does not look like a valid zipped mht file' % (f))
    contents = zf.read(names[0])
    zf.close()
    return contents


def create_output_directory(input_file):
    filename = os.path.basename(input_file)
    filename = filename.split('.')[0]
    base_dir = os.path.dirname(os.path.realpath(input_file))
    output_dir = '%s.exploded' % (filename)
    output_dir = os.path.join(base_dir, output_dir)
    count = 1
    while os.path.exists(output_dir):
        output_dir = '%s-%d.exploded' % (filename, count)
        output_dir = os.path.join(base_dir, output_dir)
        count += 1
    os.makedirs(output_dir)
    return output_dir


def open_browser(storage_dir):
    """
    Try to open the generated main.htm file in the default system browser.

    """
    import webbrowser
    path = os.path.join(storage_dir, 'main.htm')
    path = os.path.abspath(path)
    webbrowser.open('file://%s' % (path))


def show_usage():
    print('Specify the input file and (optionally) a directory where the '
          'output should be stored')
    print('Specify -h to get help and -b to open the generated contents in '
          'your browser')


if __name__ == '__main__':
    main()
